# Generated by Django 5.2.6 on 2025-09-15 12:01

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(help_text='Valid email address', max_length=254, unique=True, validators=[django.core.validators.EmailValidator()])),
                ('first_name', models.CharField(help_text="User's first name", max_length=100)),
                ('last_name', models.CharField(help_text="User's last name", max_length=100)),
                ('agrees_to_terms', models.BooleanField(default=False, help_text='User agrees to platform terms and conditions')),
                ('terms_agreed_at', models.DateTimeField(blank=True, help_text='When user agreed to terms', null=True)),
                ('terms_version', models.CharField(default='1.0', help_text='Version of terms agreed to', max_length=20)),
                ('profile_completed', models.BooleanField(default=False, help_text='Whether user has completed their profile setup')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('phone_number', models.CharField(blank=True, help_text="User's phone number", max_length=20)),
                ('date_of_birth', models.DateField(blank=True, help_text="User's date of birth", null=True)),
                ('bio', models.TextField(blank=True, help_text="User's biography or description")),
                ('avatar', models.ImageField(blank=True, help_text="User's profile picture", null=True, upload_to='profiles/avatars/')),
                ('email_notifications', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('marketing_emails', models.BooleanField(default=False, help_text='Receive marketing emails')),
                ('city', models.CharField(blank=True, help_text="User's city", max_length=100)),
                ('state', models.CharField(blank=True, help_text="User's state", max_length=100)),
                ('country', models.CharField(default='United States', help_text="User's country", max_length=100)),
                ('trader_since', models.DateTimeField(auto_now_add=True, help_text='When user started trading')),
                ('trading_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average trading rating (0.00-5.00)', max_digits=3)),
                ('total_trades', models.PositiveIntegerField(default=0, help_text='Total number of completed trades')),
                ('successful_trades', models.PositiveIntegerField(default=0, help_text='Number of successful trades')),
                ('is_verified_trader', models.BooleanField(default=False, help_text='Whether trader is verified')),
                ('trader_tier', models.CharField(choices=[('bronze', 'Bronze'), ('silver', 'Silver'), ('gold', 'Gold'), ('platinum', 'Platinum')], default='bronze', help_text='Trader tier based on activity and rating', max_length=20)),
                ('specialties', models.CharField(blank=True, help_text='Trading specialties (comma-separated)', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='apps_auth_u_email_e0a6be_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['agrees_to_terms'], name='apps_auth_u_agrees__1d4f41_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['profile_completed'], name='apps_auth_u_profile_e6581c_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['created_at'], name='apps_auth_u_created_e76f64_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['user'], name='apps_auth_u_user_id_ade411_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['city', 'state'], name='apps_auth_u_city_ce6327_idx'),
        ),
        migrations.AddIndex(
            model_name='userprofile',
            index=models.Index(fields=['created_at'], name='apps_auth_u_created_bc140b_idx'),
        ),
    ]
